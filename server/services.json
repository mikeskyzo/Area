{
	"services" : [
		{
			"name" : "Discord",
			"is_service_active" : "is_service_active",
			"generate_url_function" : "generate_url",
			"redirect_auth_function" : "redirect_auth",
			"reactions" : [
				{
					"name" : "discord_send_message",
					"title" : "Send a message",
					"description" : "Send a message on a discord channel",
					"functions" : [
						{
							"type" : "execute_reaction",
							"name" : "send_message"
						},
						{
							"type" : "verify_arguments",
							"name" : "send_message_check_args"
						}
					],
					"params" : [
						{
							"name" : "message",
							"description" : "Message to send on the channel"
						},
						{
							"name" : "username",
							"description" : "Username of the bot",
							"optional" : true
						},
						{
							"name" : "avatar",
							"description" : "Avatar's url of the bot",
							"optional" : true
						}
					]
				}
			]
		},
		{
			"name" : "Github",
			"is_service_active" : "is_service_active",
			"generate_url_function" : "generate_url",
			"redirect_auth_function" : "redirect_auth",
			"actions" : [
				{
					"name" : "github_new_push",
					"title" : "Repository push",
					"description" : "Trigger when someone push on a repository",
					"functions" : [
						{
							"type" : "create_action",
							"name" : "createWebhookPushOnRepo"
						},
						{
							"type" : "format_result",
							"name" : "FormatWebhookCheckZen"
						},
						{
							"type" : "delete_action",
							"name" : "deleteWebhook"
						}
					],
					"params" : [
						{
							"name" : "repository",
							"description" : "Name of the repository"
						},
						{
							"name" : "username",
							"description" : "Owner's name of the repository"
						}
					]
				},
				{
					"name" : "github_repo_labeled",
					"title" : "Repository labeled",
					"description" : "Trigger when a repository is labeled",
					"functions" : [
						{
							"type" : "create_action",
							"name" : "createWebhookRepoLabeled"
						},
						{
							"type" : "format_result",
							"name" : "FormatWebhookCheckAction"
						},
						{
							"type" : "delete_action",
							"name" : "deleteWebhook"
						}
					],
					"params" : [
						{
							"name" : "repository",
							"description" : "Name of the repository"
						},
						{
							"name" : "username",
							"description" : "Owner's name of the repository"
						}
					]
				},
				{
					"name" : "github_issue_event",
					"title" : "Repository issue event",
					"description" : "Trigger when a issue is update or created",
					"functions" : [
						{
							"type" : "create_action",
							"name" : "createWebhookIssueEvent"
						},
						{
							"type" : "format_result",
							"name" : "FormatWebhookCheckAction"
						},
						{
							"type" : "delete_action",
							"name" : "deleteWebhook"
						}
					],
					"params" : [
						{
							"name" : "repository",
							"description" : "Name of the repository"
						},
						{
							"name" : "username",
							"description" : "Owner's name of the repository"
						}
					]
				},
				{
					"name" : "github_repo_public",
					"title" : "Repository public",
					"description" : "Trigger when a repository is made public",
					"functions" : [
						{
							"type" : "create_action",
							"name" : "createWebhookRepoPublic"
						},
						{
							"type" : "format_result",
							"name" : "FormatWebhookCheckAction"
						},
						{
							"type" : "delete_action",
							"name" : "deleteWebhook"
						}
					],
					"params" : [
						{
							"name" : "repository",
							"description" : "Name of the repository"
						},
						{
							"name" : "username",
							"description" : "Owner's name of the repository"
						}
					]
				},
				{
					"name" : "github_repo_archive",
					"title" : "Repository archived",
					"description" : "Trigger when as a repository is archived",
					"functions" : [
						{
							"type" : "create_action",
							"name" : "createWebhookRepoPullRequest"
						},
						{
							"type" : "format_result",
							"name" : "FormatWebhookCheckZen"
						},
						{
							"type" : "delete_action",
							"name" : "deleteWebhook"
						}
					],
					"params" : [
						{
							"name" : "repository",
							"description" : "Name of the repository"
						},
						{
							"name" : "username",
							"description" : "Owner's name of the repository"
						}
					]
				},
				{
					"name" : "github_repo_star",
					"title" : "Repository stared",
					"description" : "Trigger when as a repository is stared",
					"functions" : [
						{
							"type" : "create_action",
							"name" : "createWebhookRepoStar"
						},
						{
							"type" : "format_result",
							"name" : "FormatWebhookCheckZen"
						},
						{
							"type" : "delete_action",
							"name" : "deleteWebhook"
						}
					],
					"params" : [
						{
							"name" : "repository",
							"description" : "Name of the repository"
						},
						{
							"name" : "username",
							"description" : "Owner's name of the repository"
						}
					]
				}
			]
		},
		{
			"name": "Reddit",
			"is_service_active": "is_service_active",
			"generate_url_function": "generateUrl",
			"redirect_auth_function": "redirectAuth",
			"actions" : [
			],
			"reactions" : [
				{
					"name": "postInSubreddit",
					"title": "Post in a subreddit",
					"description": "Create a new post in a given subreddit.",
					"functions": [
						{
							"type": "execute_reaction",
							"name": "postInSubreddit"
						},
						{
							"type": "verify_arguments",
							"name": "postInSubredditCheck"
						}
					],
					"params": [
						{
							"name": "subReddit",
							"description": "Title of the sub reddit"
						},
						{
							"name": "title",
							"description": "Title of the new post"
						},
						{
							"name": "text",
							"description": "Text of the new post"
						}
					]
				},
				{
					"name": "composePrivateMessage",
					"title": "Send private message",
					"description": "Send a private message to a given user.",
					"functions": [
						{
							"type": "execute_reaction",
							"name": "composePrivateMessage"
						},
						{
							"type": "verify_arguments",
							"name": "composePrivateMessageCheck"
						}
					],
					"params": [
						{
							"name": "to",
							"description": "Target user pseudo"
						},
						{
							"name": "subject",
							"description": "Subject of the message"
						},
						{
							"name": "text",
							"description": "Content of the message"
						}
					]
				}
			]
		},
		{
			"name" : "Slack",
			"is_service_active": "is_service_active",
			"generate_url_function" : "generate_url",
			"redirect_auth_function" : "redirect_auth",
			"reactions" : [
				{
					"name" : "slack_send_message",
					"title" : "Send a message",
					"description" : "Send a message on a slack channel",
					"functions" : [
						{
							"type" : "execute_reaction",
							"name" : "send_message"
						},
						{
							"type" : "verify_arguments",
							"name" : "send_message_check_args"
						}
					],
					"params" : [
						{
							"name" : "channel_id",
							"description" : "ID of the channel"
						},
						{
							"name" : "message",
							"description" : "Message to send on the channel"
						}
					]
				}
			]
		},
		{
			"name" : "Mail",
			"is_service_active": "is_service_active",
			"reactions" : [
				{
					"name" : "send_mail",
					"title" : "Send mail",
					"description" : "Send a mail",
					"functions" : [
						{
							"type" : "execute_reaction",
							"name" : "send_message"
						},
						{
							"type" : "verify_arguments",
							"name" : "send_message_check_args"
						}
					],
					"params" : [
						{
							"name" : "email",
							"description" : "Email address to send to"
						},
						{
							"name" : "message",
							"description" : "Message to send"
						}
					]
				}
			]
		},
		{
			"name" : "Twitch",
			"is_service_active" : "is_service_active",
			"check_token_function" : "CheckToken",
			"actions" : [
				{
					"name" : "Twitch_Create_Webhook_New_Subscriber",
					"title" : "Create Twitch newSuscriber webhook",
					"description" : "Trigger when there's a new follower to the given login.",
					"functions" : [
						{
							"type" : "create_action",
							"name" : "Twitch_Create_Webhook_NewSubscriber"
						},
						{
							"type" : "format_result",
							"name" : "Twitch_Create_Webhook_NewSubscriber_FM"
						},
						{
							"type" : "delete_action",
							"name" : "Twitch_Delete_Webhook_NewSubscriber"
						},
						{
							"type" : "confirm_webhook_function",
							"name" : "confirmWebhookFunctionTwitch"
						}
					],
					"params" : [
						{
							"name" : "login",
							"description" : "login of the twitch channel"
						}
					]
				},
				{
					"name" : "Twitch_Create_Webhook_Stream_ChangeState",
					"title" : "Create Twitch changeState webhook",
					"description" : "Trigger when the given login change his stream state.",
					"functions" : [
						{
							"type" : "create_action",
							"name" : "Twitch_Create_Webhook_StreamChangeState"
						},
						{
							"type" : "format_result",
							"name" : "Twitch_Create_Webhook_StreamChangeState_FM"
						},
						{
							"type" : "delete_action",
							"name" : "Twitch_Delete_Webhook_StreamChangeState"
						},
						{
							"type" : "confirm_webhook_function",
							"name" : "confirmWebhookFunctionTwitch"
						}
					],
					"params" : [
						{
							"name" : "login",
							"description" : "login of the twitch channel"
						}
					]
				}
			]
		}
	]
}